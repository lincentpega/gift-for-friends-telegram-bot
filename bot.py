import logging

from aiogram import Bot, Dispatcher
from aiogram import types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, ContentTypes

import sheets
from config import keyboards as kb
from config.env import bot_token, provider_token
from model.user import get_user, add_user, User, mark_user_as_tried

logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

storage = MemoryStorage()
bot = Bot(token=bot_token)
dp = Dispatcher(bot, storage=storage)

prices = [
    types.LabeledPrice('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è', 10000)
]


class Form(StatesGroup):
    start = State()
    occasion = State()
    gift_type = State()
    relation = State()
    person_desc = State()
    email = State()
    approve_email = State()
    payment = State()


@dp.callback_query_handler(lambda c: c.data == 'start_form', state=Form.start)
async def start_form(callback: types.CallbackQuery):
    message: types.Message = callback.message
    await Form.occasion.set()
    await bot.edit_message_reply_markup(message.chat.id, message.message_id,
                                        callback.inline_message_id, reply_markup=None)
    await bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –ø–æ–≤–æ–¥?')


@dp.message_handler(state=[None, Form.start])
async def handle_help(message: types.Message):
    name = message.from_user.first_name
    user_id = message.from_user.id

    user = get_user(user_id)
    if user is None:
        user = add_user(User(user_id=user_id, tried=False))

    reply_markup: InlineKeyboardMarkup
    if user.is_tried():
        reply_markup = kb.payed_recommendation_kb
    else:
        reply_markup = kb.try_kb
    await Form.start.set()
    await bot.send_message(user_id,
                           f'–ü—Ä–∏–≤–µ—Ç {name} !\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–∏—Å–∞, —è –±–æ—Ç - –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç–∞—Ä—Ç–∞–ø–∞ <i>Gift for a friend</i>',
                           reply_markup=reply_markup, parse_mode='HTML')


@dp.message_handler(state=Form.occasion)
async def handle_occasion(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['occasion'] = message.text
    await Form.gift_type.set()
    await bot.send_message(message.chat.id,
                           '–ö–∞–∫–æ–π —Ç–∏–ø –ø–æ–¥–∞—Ä–∫–∞ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏?',
                           reply_markup=kb.gift_type_kb)


@dp.callback_query_handler(state=Form.gift_type)
async def handle_gift_type(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['gift_type'] = callback.data
        log.info(f'gift type = {callback.data}')
    await Form.relation.set()
    await bot.send_message(callback.message.chat.id, '–ö–∞–∫–æ–≤–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –≤–∞–º? (–Ω–∞–ø—Ä–∏–º–µ—Ä - –ø–ª–µ–º—è–Ω–Ω–∏–∫ / –±–æ—Å—Å)')


@dp.message_handler(state=Form.relation)
async def handle_relation(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['relation'] = message.text
    await Form.person_desc.set()
    await bot.send_message(message.chat.id,
                           text='–û–ø–∏—à–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ :\n'
                                '<code>–≠—Ç–æ –¥–µ–≤—É—à–∫–∞/–ø–∞—Ä–µ–Ω—å, –µ–π N –ª–µ—Ç, —Å–µ–π—á–∞—Å –æ–Ω/–æ–Ω–∞ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è___.\n'
                                '–û–Ω–∞ —É–≤–ª–µ–∫–∞–µ—Ç—Å—è __. –£ –Ω–µ–≥–æ/–Ω–µ—ë –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç__. –ï–π –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–∞–¥–æ—Å—Ç—å__.\n'
                                '–ò –≤ –±—É–¥—É—â–µ–º –æ–Ω–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç__.</code>\n'
                                '–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–∫–æ–π-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏–º',
                           parse_mode='HTML')


@dp.message_handler(state=Form.person_desc)
async def handle_person_desc(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['person_desc'] = message.text
    await Form.email.set()
    await bot.send_message(message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø—Ä–æ—à—ë–ª/–ø—Ä–æ—à–ª–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã\n'
                                            '–û—Å—Ç–∞–≤—å —Å–≤–æ—é –ø–æ—á—Ç—É —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–±–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É')


@dp.message_handler(lambda message: is_email_valid(message.text), state=Form.email)
async def handle_correct_email(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['username'] = message.from_user.username
        data['email'] = message.text
        data['is_payed'] = get_user(message.from_user.id).is_tried()
        await Form.approve_email.set()
        await bot.send_message(message.chat.id, f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ—á—Ç—ã\n{data["email"]}',
                               reply_markup=kb.approve_email_kb)


@dp.callback_query_handler(lambda c: c.data == 'change_email', state=Form.approve_email)
async def handle_change_email(callback: types.CallbackQuery):
    await Form.email.set()
    await bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—É—é –ø–æ—á—Ç—É')


@dp.callback_query_handler(lambda c: c.data == 'right_email', state=Form.approve_email)
async def handle_right_email(callback: types.CallbackQuery, state: FSMContext):
    await Form.payment.set()
    user = get_user(callback.from_user.id)
    if user.is_tried():
        await bot.send_message(callback.message.chat.id, '–ü–æ–¥–∞—Ä–æ–∫ üéÅ- –º—ã —Ç–∞–∫–∂–µ –≤—ã—à–ª–µ–º —Ç–µ–±–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ '
                                                '–æ —Ç–æ–º –∫–∞–∫ —É–ø–∞–∫–æ–≤–∞—Ç—å –∏ –ø—Ä–µ–ø–æ–¥–Ω–æ—Å–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫.')
        return await bot.send_invoice(callback.message.chat.id, title='–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–∞—Ä–∫—É',
                                      description='–ü–æ–ª—É—á–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–∞—Ä–∫—É',
                                      provider_token=provider_token,
                                      currency='RUB',
                                      prices=prices,
                                      payload='recommendation')
    await Form.start.set()
    mark_user_as_tried(callback.from_user.id)
    await load_data(state)
    return await bot.send_message(callback.message.chat.id,
                                  '–ü–æ–¥–∞—Ä–æ–∫ üéÅ- –º—ã —Ç–∞–∫–∂–µ –≤—ã—à–ª–µ–º —Ç–µ–±–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ '
                                  '–æ —Ç–æ–º –∫–∞–∫ —É–ø–∞–∫–æ–≤–∞—Ç—å –∏ –ø—Ä–µ–ø–æ–¥–Ω–æ—Å–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫.\n'
                                  '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –ø—Ä–∏–¥—É—Ç —Ç–µ–±–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–≤—É—Ö —á–∞—Å–æ–≤.')


@dp.message_handler(state=Form.approve_email)
@dp.message_handler(lambda message: not is_email_valid(message.text), state=Form.email)
async def handle_incorrect_email(message: types.Message):
    await bot.send_message(message.chat.id, '–ü–æ—á—Ç–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è, –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑')


@dp.pre_checkout_query_handler(lambda query: True, state=Form.payment)
async def checkout(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                        error_message='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç')


@dp.message_handler(content_types=ContentTypes.SUCCESSFUL_PAYMENT, state=Form.payment)
async def got_payment(message: types.Message, state: FSMContext):
    await Form.start.set()
    await load_data(state)
    await bot.send_message(message.chat.id, '–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞!\n'
                                            '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –ø—Ä–∏–¥—É—Ç —Ç–µ–±–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–≤—É—Ö —á–∞—Å–æ–≤')


def is_email_valid(email: str) -> int:
    return email.find('@')


async def load_data(state: FSMContext):
    async with state.proxy() as data:
        sheets.append_to_table(
            username=data['username'],
            email=data['email'],
            is_payed=data['is_payed'],
            occasion=data['occasion'],
            gift_type=data['gift_type'],
            relation=data['relation'],
            person_desc=data['person_desc']
        )
